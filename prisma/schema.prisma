// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  USER
  SUPERUSER
}

enum NeuralEngine {
  SixTeenCores
  ThirtyCores
}

enum CapacityOn {
  GB
  TB
}

enum ChipFamilyName {
  M1
  M2
  M3
  S8
  S9
  A15
  A16
  A17
}

enum ChipGama {
  BASE
  PRO
  MAX
  ULTRA
}

enum Gender {
  DISPLAY
  LAPTOP
  DESKTOP
  PHONE
  TABLET
  WATCH
  AUDIO
  ACCESSORY
  VISION
}

enum CategoryName {
  IPHONE
  IPAD
  WATCH
  MAC
  VISION
  AIRPODS
  TVHOME
  ACCESSORIES
}

model Color {
  id          String @id @default(uuid())
  name        String @unique
  hexadecimal String
}

model ChipFamily {
  id             String         @id @default(uuid())
  chipFamilyName ChipFamilyName
  gama           ChipGama
  description    String
  Chip           Chip?
}

model Cpu {
  id        String      @id @default(uuid())
  cores     Int
  value     Float
  CpuOnChip CpuOnChip[]
}

model CpuOnChip {
  chip   Chip   @relation(fields: [chipId], references: [id])
  chipId String

  Cpu   Cpu    @relation(fields: [cpuId], references: [id])
  cpuId String

  @@id([cpuId, chipId])
}

model Gpu {
  id        String      @id @default(uuid())
  cores     Int
  value     Float
  GpuOnChip GpuOnChip[]
}

model GpuOnChip {
  chip   Chip   @relation(fields: [chipId], references: [id])
  chipId String

  Gpu   Gpu    @relation(fields: [gpuId], references: [id])
  gpuId String

  @@id([gpuId, chipId])
}

model UnifiedMemory {
  id                  String                @id @default(uuid())
  capacity            Int
  value               Float
  UnifiedMemoryOnChip UnifiedMemoryOnChip[]
}

model UnifiedMemoryOnChip {
  chip   Chip   @relation(fields: [chipId], references: [id])
  chipId String

  undefinedMemory   UnifiedMemory @relation(fields: [undefinedMemoryId], references: [id])
  undefinedMemoryId String

  @@id([undefinedMemoryId, chipId])
}

model Storage {
  id         String          @id @default(uuid())
  capacity   Int
  value      Float
  capacityOn CapacityOn
  chips      StorageOnChip[]
}

model StorageOnChip {
  chip      Chip    @relation(fields: [chipId], references: [id])
  chipId    String
  storage   Storage @relation(fields: [storageId], references: [id])
  storageId String

  @@id([storageId, chipId])
}

model Chip {
  id                  String                @id @default(uuid())
  neuralEngine        NeuralEngine[]
  Product             Product[]
  // * Relationships
  chipFamily          ChipFamily?           @relation(fields: [chipFamilyId], references: [id])
  chipFamilyId        String                @unique
  Gpu           GpuOnChip[]
  Cpu           CpuOnChip[]
  storage             StorageOnChip[]
  undefinedMemory UnifiedMemoryOnChip[]
}

model Category {
  id          String       @id @default(uuid())
  name        CategoryName @unique
  // * Relationships
  subCategory SubCategory[]
}

model SubCategory {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  gender     Gender
  //  * Relationships
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   
  Product    Product?
}

model Product {
  id          String @id @default(uuid())
  name        String
  description String
  slug        String @unique
  price       Float  @default(0)

  // * relationships
  chip   Chip   @relation(fields: [chipId], references: [id])
  chipId String

  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String      @unique

  ProductPicture ProductPicture[]
}

model ProductPicture {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(USER)
  picture       String?

  // * relationships
  ShippingAddress ShippingAddress[]

  Order Order[]
}

model Country {
  id   String @id
  name String

  // * relationships
  ShippingAddress ShippingAddress[]
}

model ShippingAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  // * relationships
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Order Order[]
}

model Order {
  id            String    @id @default(uuid())
  subTotal      Float
  tax           Float
  total         Float
  itemsInOrder  Int
  isPaid        Boolean   @default(false)
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactionId String?

  // * relationships
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderAddress      ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?

  // OrderItem    OrderItem[]
}
