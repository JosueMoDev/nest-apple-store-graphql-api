// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  USER
  SUPERUSER
}

enum NeuralEngine {
  SixTeenCores
  ThirtyCores
}

enum CapacityOn {
  GB
  TB
}

enum ChipFamilyName {
  M1
  M2
  M3
  S8
  S9
  A15
  A16
  A17
}

enum ChipGama {
  BASE
  PRO
  BIONIC
  MAX
  ULTRA
}

enum Gender {
  DISPLAY
  LAPTOP
  DESKTOP
  PHONE
  TABLET
  WATCH
  AUDIO
  ACCESSORY
  VISION
}

enum CategoryName {
  IPHONE
  IPAD
  WATCH
  MAC
  VISION
  AIRPODS
  TVHOME
  ACCESSORIES
}

model ChipFamily {
  id             String         @id @default(uuid())
  chipFamilyName ChipFamilyName
  gama           ChipGama
  description    String
  // * Relations

  chip Chip?
}

model Cpu {
  id    String @id @default(uuid())
  cores Int
  // * Relations

  cpuOnChip CpuOnChip[]
}

model CpuOnChip {
  chip   Chip   @relation(fields: [chipId], references: [id])
  chipId String
  cpu    Cpu    @relation(fields: [cpuId], references: [id])
  cpuId  String
  price  Float

  @@id([cpuId, chipId])
}

model Gpu {
  id    String @id @default(uuid())
  cores Int
  // * Relations

  gpuOnChip GpuOnChip[]
}

model GpuOnChip {
  chip   Chip   @relation(fields: [chipId], references: [id])
  chipId String
  gpu    Gpu    @relation(fields: [gpuId], references: [id])
  gpuId  String
  price  Float

  @@id([gpuId, chipId])
}

model UnifiedMemory {
  id       String @id @default(uuid())
  capacity Int
  // * Relations

  UnifiedMemoryOnChip UnifiedMemoryOnChip[]
}

model UnifiedMemoryOnChip {
  chip              Chip          @relation(fields: [chipId], references: [id])
  chipId            String
  undefinedMemory   UnifiedMemory @relation(fields: [undefinedMemoryId], references: [id])
  undefinedMemoryId String
  price             Float

  @@id([undefinedMemoryId, chipId])
}

model Storage {
  id         String     @id @default(uuid())
  capacity   Int
  capacityOn CapacityOn
  // * Relations

  chips StorageOnChip[]
}

model StorageOnChip {
  chip      Chip    @relation(fields: [chipId], references: [id])
  chipId    String
  storage   Storage @relation(fields: [storageId], references: [id])
  storageId String
  price     Float

  @@id([storageId, chipId])
}

model Chip {
  id           String         @id @default(uuid())
  neuralEngine NeuralEngine[]
  // * Relations

  chipFamily      ChipFamily?           @relation(fields: [chipFamilyId], references: [id])
  chipFamilyId    String                @unique
  Gpu             GpuOnChip[]
  Cpu             CpuOnChip[]
  storage         StorageOnChip[]
  undefinedMemory UnifiedMemoryOnChip[]
  product         Product[]
}

model Category {
  id   String       @id @default(uuid())
  name CategoryName @unique
  // * Relations

  subCategory SubCategory[]
}

model SubCategory {
  id     String @id @default(uuid())
  name   String
  slug   String @unique
  gender Gender
  //  * Relations

  category           Category             @relation(fields: [categoryId], references: [id])
  categoryId         String
  product            Product?
  techSpecsOnProduct TechSpecsOnProduct[]
}

model TechSpecsOnProduct {
  id        String @id @default(uuid())
  name      String @unique
  techSpecs Json?
  // * Relations

  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String
  Product       Product?
}

model Product {
  id          String @id @default(uuid())
  name        String @unique
  description String
  slug        String @unique
  price       Float  @default(0)

  // * Relations

  chip                 Chip               @relation(fields: [chipId], references: [id])
  chipId               String
  subCategory          SubCategory        @relation(fields: [subCategoryId], references: [id])
  subCategoryId        String             @unique
  productPicture       ProductPicture[]
  techSpecsOnProduct   TechSpecsOnProduct @relation(fields: [techSpecsOnProductId], references: [id])
  techSpecsOnProductId String             @unique
  ColorOnProduct       ColorOnProduct[]
  OrderItem            OrderItem[]
}

model Color {
  id               String @id @default(uuid())
  name             String
  hexadecimalColor String @unique
  // * Relations

  ColorOnProduct          ColorOnProduct[]
  PictureByColorOnProduct PictureByColorOnProduct[]
}

model ColorOnProduct {
  product      Product @relation(fields: [productId], references: [id])
  productId    String
  color        Color   @relation(fields: [colorId], references: [id])
  colorId      String
  stockByColor Int

  @@id([productId, colorId])
}

model PictureByColorOnProduct {
  colorProduct     Color          @relation(fields: [colorProductId], references: [id])
  colorProductId   String
  productPicture   ProductPicture @relation(fields: [productPictureId], references: [id])
  productPictureId String

  @@id([colorProductId, productPictureId])
}

model ProductPicture {
  id  String @id @default(uuid())
  url String
  // * Relations

  product                 Product                   @relation(fields: [productId], references: [id])
  productId               String
  PictureByColorOnProduct PictureByColorOnProduct[]
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role
  picture       String?
  isActive      Boolean   @default(true)
  // * Relations

  shippingAddress ShippingAddress[]
  order           Order[]
}

model Country {
  id   String @id
  name String
  // * Relations

  shippingAddress ShippingAddress[]
}

model ShippingAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String
  // * Relations

  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  order     Order[]
}

model OrderItem {
  id             String  @id @default(uuid())
  quantity       Int
  price          Float
  productDetails Json
  //* Relations
  order          Order   @relation(fields: [orderId], references: [id])
  orderId        String
  product        Product @relation(fields: [productId], references: [id])
  productId      String
}

model Order {
  id            String    @id @default(uuid())
  subTotal      Float
  tax           Float
  total         Float
  itemsInOrder  Int
  isPaid        Boolean   @default(false)
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactionId String?

  // * Relations
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  orderAddress      ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  OrderItem         OrderItem[]
}
