// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  USER
  SUPERUSER
}

model Color {
  id          String @id @default(uuid())
  name        String @unique
  hexadecimal String
}

// model Cpu {
//   id    String @id @default(uuid())
//   cores String
//   value Float
// }

// model Gpu {
//   id    String @id @default(uuid())
//   cores String
//   value Float
// }

// model unifiedMemory {
//   id       String @id @default(uuid())
//   capacity String
//   value    Float
// }

model Storage {
  id       String          @id @default(uuid())
  capacity String
  value    Float
  chips    StorageOnChip[]
}

enum NeuralEngine {
  SexTeenCores
  ThirtyCores
}

model StorageOnChip {
  chip      Chip    @relation(fields: [chipId], references: [id])
  chipId    String
  storage   Storage @relation(fields: [storageId], references: [id])
  storageId String

  @@id([storageId, chipId])
}

model Chip {
  id           String          @id @default(uuid())
  name         String
  neuralEngine NeuralEngine[]
  storage      StorageOnChip[]
  Product      Product[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  Product     Product?
}

model Product {
  id          String @id @default(uuid())
  name        String
  description String
  slug        String @unique
  price       Float  @default(0)

  // * relationships
  chip           Chip             @relation(fields: [chipId], references: [id])
  chipId         String

  ProductPicture ProductPicture[]
  category       Category         @relation(fields: [categoryId], references: [id])
  
  categoryId     String           @unique
}

model ProductPicture {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(USER)
  picture       String?

  // * relationships
  ShippingAddress ShippingAddress[]

  Order Order[]
}

model Country {
  id   String @id
  name String

  // * relationships
  ShippingAddress ShippingAddress[]
}

model ShippingAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  // * relationships
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Order Order[]
}

model Order {
  id            String    @id @default(uuid())
  subTotal      Float
  tax           Float
  total         Float
  itemsInOrder  Int
  isPaid        Boolean   @default(false)
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactionId String?

  // * relationships
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderAddress      ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?

  // OrderItem    OrderItem[]
}
